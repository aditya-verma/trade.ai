"""
Django settings for trade_ai project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os

from pathlib import Path

from django.core.exceptions import ImproperlyConfigured



def read_env_variable(key=None, default=None):
    """Helper function to read environment variables from host machine.

    To keep sensitive data i.e. Secret keys and DB credentials, separated from
    main code to avoid leakage of any such details into the source code.

    Args:
        key (str): str object of environment variable's name.
        default (object): Default value to be returned, if environment
                            variable does not exists.

    Returns:
        object: Returns value of environment variable if it exists else
                default value.

    Raises:
        ImproperlyConfigured: Raises an exception if environment variable is
                              not defined.

    Example:
        Key and its default value to be passed as arguments. Suggested
        nomenclature for environment variables, TRADEAI_<KEY_NAME>

        >>> read_env_variable('TRADEAI_SECRET_KEY', 'secret_key_value')
        'some_gibberish_secret_key_value'
    """
    if isinstance(key, str):
        try:
            return os.environ[key]
        except KeyError:
            return default or None

            raise ImproperlyConfigured(f'Set the {key} environment valriable.')

    return default


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = read_env_variable(
    'TRADEAI_SECRET_KEY',
    'v!i7tezps4!9i6km1shg__28^m6+2reb2pxfm34^o+urj^d9g_'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = read_env_variable('TRADEAI_IS_DEBUG', True)

ALLOWED_HOSTS = read_env_variable(
    'TRADEAI_ALLOWED_HOSTS',
    ['*']
)

# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

TRADEAI_APPS = [
    'trade_ai.accounts',
    'trade_ai.base',
    'trade_ai.btc_usdt'
]

THIRD_PARTY_APPS = [
    'rest_framework',
]

INSTALLED_APPS = DJANGO_APPS + TRADEAI_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'trade_ai.urls'

DEFAULT_AUTO_FIELD='django.db.models.BigAutoField'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'trade_ai.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DB_ENGINE = 'django.db.backends.postgresql_psycopg2'
DB_NAME = read_env_variable('TRADEAI_DB_NAME')
DB_USER = read_env_variable('TRADEAI_DB_USER_NAME')
DB_PASSWORD = read_env_variable('TRADEAI_DB_USER_PASSWORD')
DB_HOST = read_env_variable('TRADEAI_DB_HOST', 'pgdb')
DB_PORT = int(read_env_variable('TRADEAI_DB_PORT', '5432'))

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = False

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(os.path.abspath(os.curdir), 'staticfiles')

ROOT_URLCONF = 'trade_ai.urls'

AUTH_USER_MODEL = 'accounts.User'

AUTHENTICATION_BACKENDS = (
    'trade_ai.accounts.backends.UserAuthenticationBackend',
)

DEFAULT_RENDERER_CLASSES = (
    'rest_framework.renderers.JSONRenderer',
)

if DEBUG:
    DEFAULT_RENDERER_CLASSES = DEFAULT_RENDERER_CLASSES + (
        'rest_framework.renderers.BrowsableAPIRenderer',
    )

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': DEFAULT_RENDERER_CLASSES,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'trade_ai.accounts.backends.UserJWTAuthenticationBackend',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ]
}

BINANCE_API_KEY = read_env_variable('BINANCE_API_KEY', '')
BINANCE_API_SECRET = read_env_variable('BINANCE_API_SECRET', '')

JWT_TOKEN_VALIDITY_DAYS = int(read_env_variable('JWT_TOKEN_VALIDITY_DAYS', '7'))

# CELERY SETTINGS
CELERY_BROKER_URL = read_env_variable('CELERY_BROKER', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = read_env_variable('CELERY_BROKER', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kolkata'
